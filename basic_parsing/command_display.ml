(* Text display of a the commands in the commands catalog *)

let text_display = [
	("FEMTO", "\001");
	("PICO", "\002");
	("NANO", "\003");
	("MICRO", "\004");
	("MILLI", "\005");
	("KILO", "\006");
	("MEGA", "\007");
	("GIGA", "\008");
	("TERA", "\009");
	("PETA", "\010");
	("EXA", "\011");
	("DISP", "\012");
	("EOL", "\013");
	("ASSIGN", "\014");
	("TIMESTENPOWER", "\015");
	("LEQ", "\016");
	("DIFFERENT", "\017");
	("GEQ", "\018");
	("IMPL", "\019");
	("QUOTE", "\034");
	("LPAR", "(");
	("RPAR", ")");
	("COLON", ":");
	("LESS", "<");
	("EQUAL", "=");
	("GREATER", ">");
	("QMARK", "?");
	("LSQBRACKET", "[");
	("RSQBRACKET", "]");
	("LBRACKET", "{");
	("RBRACKET", "}");
	("POLPAR", "Pol(");
	("SIN", "sin ");
	("COS", "cos ");
	("TAN", "tan ");
	("LN", "ln ");
	("SQRT", "\134");
	("UMINUS", "\135");
	("THICKP", "\136");
	("PLUS", "+");
	("POWER2", "\139");
	("COORDSIGN", "\140");
	("INTEGRALPAR", "\230\187(");
	("ARCSIN", "sin\155 ");
	("ARCCOS", "cos\155 ");
	("ARCTAN", "tan\155 ");
	("LOG", "log ");
	("CURT", "\229\223\134");
	("ABS", "Abs ");
	("THICKC", "\152");
	("MINUS", "\153");
	("POWERMINUS1", "\155");
	("DEGREESIGN", "\156");
	("RECPAR", "Rec(");
	("SINH", "sinh ");
	("COSH", "cosh ");
	("TANH", "tanh ");
	("EPOWER", "e\168");
	("INT", "Int ");
	("POWER", "\168");
	("TIMES", "\169");
	("EXCLAMATIONMARK", "\171");
	("RADIANSIGN", "\172");
	("ARCSINH", "sinh\155 ");
	("ARCCOSH", "cosh\155 ");
	("ARCTANH", "tanh\155 ");
	("TENPOWER", "\181");
	("FRAC", "Frac ");
	("NSQRT", "\229\221\134");
	("DIVIDED", "\185");
	("FRACSIGN", "\187");
	("GRADSIGN", "\188");
	("ANS", "Ans");
	("RAN", "Ran\035 ");
	("SMALLR", "\205");
	("THETA", "\206");
	("PI", "\208");
	("CLS", "Cls");
	("RND", "Rnd");
	("NORM", "Norm ");
	("DEG", "Deg");
	("RAD", "Rad");
	("GRA", "Gra");
	("ENG", "Eng");
	("INTG", "Intg ");
	("PLOT", "Plot ");
	("LINE", "Line");
	("LBL", "Lbl ");
	("FIX", "Fix ");
	("SCI", "Sci ");
	("DSZ", "Dsz ");
	("ISZ", "Isz ");
	("FACTOR", "Factor ");
	("VIEWWINDOW", "ViewWindow ");
	("GOTO", "Goto ");
	("PROG", "Prog ");
	("GRAPHYEQ", "Graph Y=");
	("GRAPHS", "Graph \230\187");
	("GRAPHYG", "Graph Y>");
	("GRAPHYL", "Graph Y<");
	("GRAPHYGEQ", "Graph Y\018");
	("GRAPHYLEQ", "Graph Y\016");
	("GRAPHREQ", "Graph r=");
	("GRAPHXYEQ", "Graph(X,Y)=(");
	("PPAR", "P(");
	("QPAR", "Q(");
	("RPAR", "R(");
	("TPAR", "t(");
	("MAX", "Max(");
	("DET", "Det ");
	("ARG", "Arg ");
	("CONJG", "Conjg ");
	("REP", "ReP ");
	("IMP", "ImP ");
	("DOVERDX", "d/dx(");
	("DSQOVERDXSQ", "d\139/dx\139");
	("SOLVE", "Solve(");
	("SIGMAPAR", "\229\081(");
	("FMIN", "FMin(");
	("FMAX", "FMax(");
	("SEQ", "Seq(");
	("MIN", "Min(");
	("MEAN", "Mean(");
	("MEDIAN", "Median(");
	("SOLVEN", "SolveN(");
	("MOD", "MOD(");
	("MODEXP", "MOD_Exp(");
	("GCD", "GCD(");
	("LCM", "LCM(");
	("MAT", "Mat ");
	("TRN", "Trn ");
	("STARROW", "\042Row ");
	("STARROWPLUS", "\042Row+ ");
	("ROWPLUS", "Row+ ");
	("SWAP", "Swap ");
	("DIM", "Dim ");
	("FILL", "Fill(");
	("IDENTITY", "Identity ");
	("AUGMENT", "Augment(");
	("LISTTOMAT", "List\014Mat(");
	("MATTOLIST", "Mat\014List(");
	("SUM", "Sum ");
	("PROD", "Prod ");
	("PERCENT", "Percent ");
	("CUML", "Cuml ");
	("CPLXI", "\127\080");
	("LIST", "List ");
	("DELTALIST", "\229\067List ");
	("CHEVRON", "\127\084");
	("REF", "Ref ");
	("RREF", "Rref ");
	("BLACKARROW", "\230\158");
	("LOGAB", "logab(");
	("RNDFIX", "RndFix(");
	("RANINT", "RanInt\035(");
	("RANLIST", "RanList\035(");
	("RANBIN", "RanBin\035(");
	("RANNORM", "RanNorm\035(");
	("GETKEY", "Getkey");
	("TOSIMP", "\230\158Simp ");
	("AND", " And ");
	("OR", " Or ");
	("NOT", "Not ");
	("XOR", " Xor ");
	("INTDIV", " Int\185 ");
	("RMDR", " Rmdr ");
	("IF", "If ");
	("THEN", "Then ");
	("ELSE", "Else ");
	("IFEND", "IfEnd");
	("FOR", "For ");
	("TO", " To ");
	("STEP", " Step ");
	("NEXT", "Next");
	("WHILE", "While ");
	("WHILEEND", "WhileEnd");
	("DO", "Do");
	("LPWHILE", "LpWhile ");
	("RETURN", "Return");
	("BREAK", "Break");
	("STOP", "Stop");
	("LOCATE", "Locate ");
	("CLRTEXT", "ClrText");
	("CLRGRAPH", "ClrGraph");
	("CLRLIST", "ClrList ");
	("SLNORMAL", "S-L-Normal");
	("SLTHICK", "S-L-Thick");
	("SLBROKEN", "S-L-Broken");
	("SLDOT", "S-L-Dot");
	("DRAWGRAPH", "DrawGraph");
	("DRAWDYNA", "DrawDyna");
	("DRAWSTAT", "DrawStat");
	("NORMALG", "NormalG ");
	("THICKG", "ThickG ");
	("BROKENTHICKG", "BrokenThickG ");
	("BAR", "Bar");
	("DOTG", "DotG ");
	("SGPH1", "S-Gph1 ");
	("SGPH2", "S-Gph2 ");
	("SGPH3", "S-Gph3 ");
	("SQUARE", "Square");
	("CROSS", "Cross");
	("DOT", "Dot");
	("SCATTER", "Scatter");
	("XYLINE", "xyLine");
	("HIST", "Hist");
	("MEDBOX", "MedBox");
	("NDIST", "N-Dist");
	("BROKEN", "Broken");
	("SWINDAUTO", "S-WindAuto");
	("SWINDMAN", "S-WindMan");
	("GRAPHXEQ", "Graph X=");
	("YEQUALTYPE", "Y=Type");
	("REQUALTYPE", "r=Type");
	("PARAMTYPE", "ParamType");
	("XEQUALTYPE", "X=Type");
	("XGTYPE", "X>Type");
	("XLTYPE", "X<Type");
	("YGTYPE", "Y>Type");
	("YLTYPE", "Y<Type");
	("YGEQTYPE", "Y\018Type");
	("YLEQTYPE", "Y\016Type");
	("XGEQTYPE", "X\018Type");
	("XLEQTYPE", "X\016Type");
	("GCONNECT", "G-Connect");
	("GPLOT", "G-Plot");
	("BGNONE", "BG-None");
	("BGPICT", "BG-Pict ");
	("GRIDOFF", "GridOff");
	("GRIDON", "GridOff");
	("DVAR", "D Var ");
	("SKETCHNORMAL", "SketchNormal ");
	("SKETCHTHICK", "SketchThick ");
	("SKETCHBROKEN", "SketchBroken ");
	("SKETCHDOT", "SketchDot ");
	("STOPICT", "StoPict ");
	("RCLPICT", "RclPict ");
	("STOGMEM", "StoGMEM ");
	("RCLGMEM", "RclGMEM ");
	("STOVWIN", "StoV-Win ");
	("RCLVWIN", "RclV-Win ");
	("PERCENTSIGN", "\037");
	("DATA", "Data");
	("MENU", "Menu ");
	("RCLCAPT", "RclCapt ");
	("TANGENT", "Tangent ");
	("NORMAL", "Normal ");
	("INVERSE", "Inverse ");
	("VERTICAL", "Vertical ");
	("HORIZONTAL", "Horizontal ");
	("TEXT", "Text ");
	("CIRCLE", "Circle");
	("FLINE", "F-Line ");
	("PLOTON", "PlotOn ");
	("PLOTOFF", "PlotOff ");
	("PLOTCHG", "PlotChg ");
	("PXLON", "PxlOn ");
	("PXLOFF", "PxlOff ");
	("PXLCHG", "PxlChg ");
	("PXLTEST", "PxlTest(");
	("SORTA", "SortA(");
	("SORTD", "SortD(");
	("YDRAWSPEEDNORM", "Y=DrawSpeedNorm");
	("YDRAWSPEEDHIGH", "Y=DrawSpeedHigh");
	("FUNCON", "FuncOn");
	("SIMULON", "SimulOn");
	("AXESON", "AxesOn");
	("COORDON", "CoordOn");
	("LABELON", "LabelOn");
	("DERIVON", "DerivOn");
	("LOCUSON", "LocusOn");
	("GSELON", "G SelOn ");
	("TSELON", "T SelOn ");
	("DSELON", "D SelOn ");
	("DRAWON", "DrawOn");
	("ABOVERC", "ab/c");
	("DOVERC", "d/c");
	("FUNCOFF", "FuncOff");
	("SIMULOFF", "SimulOff");
	("AXESOFF", "AxesOff");
	("COORDOFF", "CoordOff");
	("LABELOFF", "LabelOff");
	("DERIVOFF", "DerivOff");
	("LOCUSOFF", "LocusOff");
	("GSELOFF", "G SelOff ");
	("TSELOFF", "T SelOff ");
	("DSELOFF", "D SelOff ");
	("DRAWOFF", "DrawOff");
	("TODMS", "\230\158DMS");
	("TOAPLUSBI", "\230\158a+b\127\080");
	("TORTHETA", "\230\158r\127\084\206");
	("REAL", "Real");
	("APLUSBI", "a+b\127\080");
	("RTHETA", "r\127\084\206");
	("ENGON", "EngOn");
	("ENGOFF", "EngOff");
	("FN", "fn"); (* the n is supposed to be one pixel shorter (I don't care) *)
	("FILE", "File ");
	("CLRMAT", "ClrMat ");
	("ZOOMAUTO", "ZoomAuto");
	("NONE", "None");
	("STICKLENGTH", "StickLength");
	("STICKHORIZ", "StickHoriz");
	("GRAPHXG", "Graph X>");
	("GRAPHXL", "Graph X<");
	("GRAPHXGEQ", "Graph X\018");
	("GRAPHXLEQ", "Graph X\016");
	("STRJOIN", "StrJoin(");
	("STRLEN", "StrLen(");
	("STRCMP", "StrCmp(");
	("STRSRC", "StrSrc(");
	("STRLEFT", "StrLeft(");
	("STRRIGHT", "StrRight(");
	("STRMID", "StrMid(");
	("EXPSTR", "Exp\230\158Str(");
	("EXPPAR", "Exp(");
	("STRUPR", "StrUpr(");
	("STRLWR", "StrLwr(");
	("STRINV", "StrInv(");
	("STRSHIFT", "StrShift(");
	("STRROTATE", "StrRotate(");
	("STR", "Str ")
];;

(* When s is a string containing special characters,
	returns the list of symbols (in string form) *)
let str_to_rev_symblist (s : string) =
	let n = String.length s in
	let rec aux acc i =
		if i >= n
			then acc
		else if List.mem (Char.code s.[i]) [127;247;249;229;230;231]
			then aux ((String.init 2 (function 0 -> s.[i] | _ -> s.[i+1]))::acc) (i+2)
		else aux ((String.make 1 s.[i])::acc) (i+1)
	in
	aux [] 0;;
	